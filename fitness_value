    def adapt_value(self):
        """
        计算适应值：最大完工时间
        :return: 最大完工时间，各运输设备运输任务开始时间
        """
        # 初始化参数
        y_queue = stack(self.Yc0, self.yc_number) + stack(self.Yc1, self.yc_number)
        Yc = [list(i) for i in y_queue]  # 各场桥调度安排
        yt = [[0 for _ in range(len(i)+1)] for i in Yc]  # 场桥时刻
        h = [0 for _ in range(len(self.task) + 1)]  # 到达交接点时间
        x = stack(self.AGV, self.agv_number)
        at = [[0 for _ in range(len(i)+1)] for i in x]  # AGV时刻
        et = [0 for _ in range(len(self.ET))]  # ET时刻
        # 时刻表
        Y = np.zeros((16, 2))
        # 堆场状态（运输的集装箱编号，yc可交接时刻）
        s = [[y_queue[0].pop(0), 0], [y_queue[1].pop(0), 0],
             [y_queue[2].pop(0), 0], [y_queue[3].pop(0), 0]]
        # 检查: 场桥的任务队列是否全部完成，完成则置零
        for i in range(len(y_queue)):
            if not y_queue[i]:
                y_queue[i] = y_queue[i] + [0]
        # 更新堆场状态：场桥到达交接点时间
        for i in range(len(s)):
            x = time_yc(Yc[i], s[i][0], self.task)
            x0 = Yc[i].index(s[i][0])
            s[i][1] = yt[i][x0] + x[1]
            yt[i][x0 + 1] = yt[i][x0] + x[0]
        # 循环迭代
        while max([i[0] for i in s]) != 0:
            # 入口排队：按'预交接时间'记录当前需要与yc对接的AGV和ET的任务列e[],a[](配合最先就位的先开始)
            e = np.array([], int)
            e0 = np.array([])
            a = np.array([], int)
            a0 = np.array([])
            for i in range(len(s)):
                if s[i][0] == 0:
                    continue
                data = self.task[self.task['Number'] == s[i][0]]
                d0 = data['Type'].iloc[0]
                # 运输设备到达交接点时间比较
                if d0 == 3 or d0 == 4:  # ET
                    e = np.append(e, s[i][0])
                    e0 = np.append(e0, s[i][1])
                else:  # AGV
                    a = np.append(a, s[i][0])
                    x = agv0(self.AGV, s[i][0], self.agv_number)
                    agv = x[0]
                    u = x[1]
                    x = np.argwhere(agv == s[i][0])[0][0]
                    a0 = np.append(a0, max(at[u][x], s[i][1]))
            e = e[np.argsort(e0)]
            a = a[np.argsort(a0)]
            # 计算AGV到达入口的时间和离开交接点的时间
            if len(a) != 0:
                n = a[0]
                x = agv0(self.AGV, n, self.agv_number)
                agv = x[0]
                u = x[1]
                # 调度修正：当前AGV不能在上一个集装箱没有运输完成时运输当前集装箱
                x0 = np.argwhere(agv == n)[0][0]
                x1 = np.argwhere(self.AGV == n)[0][0]
                while at[u][x0] == 0 and x0 != 0:
                    # print('AGV%d集装箱的排序需要调整' % n)
                    x = self.AGV[x1 - 1]
                    self.AGV[x1 - 1] = self.AGV[x1]
                    self.AGV[x1] = x
                    x0 = x0 - 1
                    x1 = x1 - 1
                # 计算
                x = [i[0] for i in s]
                x1 = x.index(n)
                data1 = self.task[self.task['Number'] == n]
                b1 = data1['Bay'].iloc[0]
                y1 = data1['Yard'].iloc[0]
                if y1 == 1:
                    b1 += 8
                t = at[u][x0]  # AGV到达入口时间
                t = max(t, Y[-1][0] + 1)  # 入口排队
                for b0 in range(len(Y)-1):  # 进入
                    if b0 <= b1:
                        t = max(t, Y[b0][0] + 1)
                Y[-1][0] = t
                h[n] = t
                if t > s[x1][1]:
                    x = Yc[x1].index(n)
                    yt[x1][x + 1] += t - s[x1][1]
                t = max(t, s[x1][1]) + 5 * 3
                for b0 in range(len(Y)-1):  # 离开
                    if b1 <= b0:
                        t = max(t, Y[b0][0] + 1)
                # 更新
                Y[b1][0] = t
                try:
                    at[u][x0 + 1] = t + 10
                except IndexError:
                    pass
                s[x1][0] = y_queue[x1].pop(0)
                # 集合元素检查更新
                for i in range(len(y_queue)):
                    if not y_queue[i]:
                        y_queue[i] = y_queue[i] + [0]
                if s[x1][0] != 0:
                    t = time_yc(Yc[x1], s[x1][0], self.task)
                    x = Yc[x1].index(s[x1][0])
                    s[x1][1] = yt[x1][x] + t[1]
                    try:
                        yt[x1][x + 1] = yt[x1][x] + t[0]
                    except IndexError:
                        pass
            # 计算ET到达入口的时间和离开交接点的时间
            if len(e) != 0:
                n = e[0]
                x0 = np.argwhere(self.ET == n)[0][0]
                # 修正：要按照初始的调度顺序运输集装箱
                while x0 != 0 and et[x0 - 1] == 0:
                    # print('ET调度顺序修正')
                    x = self.ET[x0 - 1]
                    self.ET[x0 - 1] = self.ET[x0]
                    self.ET[x0] = x
                    x0 = x0 - 1
                # 计算
                x = [i[0] for i in s]
                x1 = x.index(n)
                data1 = self.task[self.task['Number'] == n]
                b1 = data1['Bay'].iloc[0]
                t = 0  # 设都在0时刻到达入口
                t = max(0, Y[-1][1] + 1)  # 排队
                for b0 in range(len(Y)-1):
                    if b0 <= b1:
                        t = max(t, Y[b0][1] + 1)
                Y[-1][1] = t
                h[n] = t
                if t > s[x1][1]:
                    x = Yc[x1].index(n)
                    yt[x1][x + 1] += t - s[x1][1]
                t = max(t, s[x1][1]) + 5 * 3
                for b0 in range(len(Y)-1):  # 离开
                    if b1 <= b0:
                        t = max(t, Y[b0][1] + 1)
                # 更新
                Y[b1][1] = t
                try:
                    et[x0] = t
                except IndexError:
                    pass
                s[x1][0] = y_queue[x1].pop(0)
                # 集合元素检查更新
                for i in range(len(y_queue)):
                    if not y_queue[i]:
                        y_queue[i] = y_queue[i] + [0]
                if s[x1][0] != 0:
                    t = time_yc(Yc[x1], s[x1][0], self.task)
                    x = Yc[x1].index(s[x1][0])
                    s[x1][1] = yt[x1][x] + t[1]
                    try:
                        yt[x1][x + 1] = yt[x1][x] + t[0]
                    except IndexError:
                        pass
        # 计算适应值
        v = max(max([i[-1] for i in yt]), max([i[-1] for i in at]), et[-1])
        return v, yt, at, et, h
